<Squish Friends>
<Maria Acuna>
<Daniel Ju>
<Pacy Yan>
pd 3
---------------------
Squishy Chess


------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
It was really really hard to debug a program that was 1. long and 2. had many different subclasses that could also produce bugs. Eventhough our final version is fairly bug prone, we did overcome some of the challenges with debugging such a large program.

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Checkmate doesn't work. It's extremely difficult to determine all the possibilities of a checkmate, which invovles checking if the king is directly being attacked, can a piece of his own move to save him, and can the king move to save himself. Further complicating things is that some pieces are blocking the king from being checked and that was another condition that we needed to consider when running Woo.java and that issue hasn't been fully resolved yet either. 
Pieces can move through pieces of their own color. All of these issues arise from the improperly thought through Board in the very beginning. 
During the game, it is quite difficult to distinguish pieces of your color with that of your opponent's. That's very unfortunate. 
COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
One can use the slopes of lines to determine algorithms of the movement of the different pieces!
Going through the different pieces and seeing how different Java objects interacted with each other really helped us understand the language and its intricacies. 
Our biggest regret was not thinking through the design of the board class before we wrote the rest of the code, so when we realized our foolishness it was too late to change it. Rather than making the board a 2D String array, we should have made it a 2D array of Squishies (pieces) with its own toString method to print out the board. Or, we ould have a 2D array of "square" objects. That would have made checkmate much easier, since we could have just have each square object return if it's bieng attacked or not. But alas, c'est la vie, and we had to work around it. So the lesson there is: communicate early and act decisively to come up with a mechanism that we can forsee how to move forward with, instead of crossing bridges as we approach them.

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Every time we wrote an algorithm to check for checkmate, or a if a piece occupied the destination coordinates, the driver class of Woo had to be updated as well to reflect the changes and that forced us to find more efficient methods for functions like moving a piece, or capturing a piece.

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Always use lots of SOP statements to debug!
Utiliza flowcharts to plan out our methods before we start writing it. Getting an idea of the bigger picture earlier would have saved us a lot of time from re writing methods that were inefficient.
== does not work for strings! Use .equals() instead! 

 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
==============================================================


2017-01-11
--------------------------------------------------------------
Maria:: came up with mathematical ways, through the slopes of lines, of depicting the movement of chess pieces within a 2D array. For example, the knight's destination and starting destinations must form a line with slope positive or negative 1/2 or 2, and for the bishop the slope must be positive or negative 1.
Daniel:: created the outlines of the class board and began planning out the instance variables and its methods and parameters. 
Pacy:: created the outlines of the classes: Bishop, King, Knight, Pawn, Player, Queen, Rook, Squishies and SquishyChess and began work on King and SquishyChess (began planning out the instance variables and its methods and parameters).
==============================================================
2017-01-12
--------------------------------------------------------------
Maria:: 
Daniel:: Created methods within Board.java that prints the board, initializes the pieces in their starting positions, and flips the board to the other player's perspective. 
Pacy:: 
==============================================================
2017-01-13-16 (weekend)
--------------------------------------------------------------
Maria:: 
Daniel:: Finished the move method. 
Pacy:: 
==============================================================
2017-01-17-16
--------------------------------------------------------------
Maria:: 
Daniel:: Finished the main method. The game can now go on until a player is checkmated. 
Pacy:: 
==============================================================
2017-01-18-16
--------------------------------------------------------------
Maria:: 
Daniel:: Finished move algorithms for pawn. Finished algorithm to check if the space a piece is moving to is occupied, and if so, if that piece is a friendly or enemy piece.
Pacy:: 
==============================================================
2017-01-19-16
--------------------------------------------------------------
Maria:: 
Daniel:: Finished algorithm for if a player makes an invalid move, they are forced to make a different choice of piece and where to move. 
Pacy:: 
==============================================================
2017-01-20-22-16 (weekend)
--------------------------------------------------------------
Maria:: 
Daniel:: Attempted to integrate the checkmate algorithm Maria made with Woo.java, albeit only semi-successfully. 
Pacy:: 
==============================================================